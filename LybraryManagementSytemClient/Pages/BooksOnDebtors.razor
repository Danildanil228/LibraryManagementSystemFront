@page "/books-on-debtors"
@using LybraryManagementSytemClient.Models
@using LybraryManagementSytemClient.Services
@inject GraphQLService GraphQLService

<h3>Список книг у должников</h3>

@if (books == null || !books.Any())
{
    <p>Нет книг у должников.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Автор</th>
                <th>Читатель</th>
                <th>Дата возврата</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.Reader?.Name</td>
                    <td>@book.DueDate?.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book> books = new List<Book>();

    protected override async Task OnInitializedAsync()
    {
        var query = @"
        query {
            booksOnDebtors {
                title
                author
                dueDate
                reader {
                    name
                }
            }
        }";

        var response = await GraphQLService.ExecuteQueryAsync<BooksResponse>(query);
        books = response.BooksOnDebtors;
    }

    public class BooksResponse
    {
        public List<Book> BooksOnDebtors { get; set; }
    }
}